#include "stdio.h"
#include "stdlib.h"

typedef struct BTNode{  
    int data;  
    struct BTNode *lChild;  
    struct BTNode *rChild;  
}BiTNode;     

//先序创建二叉树  
int CreateBiTree(BiTNode **T)  
{  
    int ch;  
    scanf("%d",&ch);  
    if (ch == -1)  
    {  
        *T = NULL;  
        return 0;  
    }  
    else  
    {  
        *T = (BiTNode *)malloc(sizeof(BiTNode));  
        if (T == NULL)  
        {  
            printf("failed\n");  
            return 0;  
        }  
        else  
        {  
            (*T)->data = ch;  
            printf("    输入%d的左子节点：",ch);  
            CreateBiTree(&((*T)->lChild));  
            printf("    输入%d的右子节点：",ch);  
            CreateBiTree((&(*T)->rChild));  
        }  
    }  
  
    return 1;  
}  
//先序遍历二叉树  
void PreOrderBiTree(BiTNode *T)  
{  
    if (T == NULL)  
    {  
        return;  
    }  
    else  
    {  
        printf("%d ",T->data);  
        PreOrderBiTree(T->lChild);  
        PreOrderBiTree(T->rChild);  
    }  
}  
//中序遍历二叉树  
void MiddleOrderBiTree(BiTNode *T)  
{  
    if (T == NULL)  
    {  
        return;  
    }  
    else  
    {  
        MiddleOrderBiTree(T->lChild);  
        printf("%d ",T->data);  
        MiddleOrderBiTree(T->rChild);  
    }  
}  
//后续遍历二叉树  
void PostOrderBiTree(BiTNode *T)  
{  
    if (T == NULL)  
    {  
        return;  
    }  
    else  
    {  
        PostOrderBiTree(T->lChild);  
        PostOrderBiTree(T->rChild);  
        printf("%d ",T->data);  
    }  
}  

//主函数  
int main(int argc,const char *argv[])  
{  
    BiTNode *T;  
    int depth,leafCount = 0;
	int k;
	do
	{
		printf("\n\n\n\n");
		printf("      林哲显二叉树演示程序\n");
		printf("      -------------------------------");
		printf("\n     1.  建立一颗二叉树\n");
		printf("\n     2.  先序遍历二叉树\n");
		printf("\n     3.  中序遍历二叉树\n");
		printf("\n     4.  后序遍历二叉树\n");
		printf("\n     5.  退出\n");
		printf("      -------------------------------\n");
		printf("\n    请输入你的选择：");
		scanf("%d", &k);
		switch (k)
			{
			 case 1:
			 {
				printf("    请输入第一个节点的值，-1表示没有叶节点：\n");  
				CreateBiTree(&T);	
			 }break;
			 case 2:
			 {
				printf("    先序遍历二叉树：");  
				PreOrderBiTree(T); 
			 }break;
			 case 3:
			 {
				printf("    中序遍历二叉树："); 	 
				MiddleOrderBiTree(T);
			 }
			 case 4:
			 {
				printf("    后序遍历二叉树：");  
				PostOrderBiTree(T);
			 }	
			}
	}while(k!=5); 
    return 0;  
}
